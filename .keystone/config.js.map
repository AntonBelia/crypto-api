{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./dev.db',\n    },\n    lists,\n    session,\n    server: {\n      cors: {\n        origin: ['http://localhost:3001'],\n        credentials: true,\n        methods: ['GET', 'POST'],\n        allowedHeaders: ['Content-Type', 'Authorization'],\n      },\n      port: 3000,\n      extendExpressApp: (app) => {\n        app.use('/image', require('express').static('image'));\n      },\n    },\n  })\n);\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { integer } from '@keystone-6/core/fields';\n\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n} from '@keystone-6/core/fields';\n\n\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  Player: list({\n    access: allowAll, \n\n    fields: {\n      name: text({ validation: { isRequired: true } }), \n      wins: integer({ validation: { isRequired: true } }), \n      avatarUrl: text({ validation: { isRequired: true } }), \n    },\n  }),\n\n  User: list({\n    access: allowAll,\n\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n\n};\n", "import { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\nimport { statelessSessions } from '@keystone-6/core/session';\n\n\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAAuB;;;ACAvB,kBAAqB;AACrB,oBAAyB;AACzB,oBAAwB;AAExB,IAAAC,iBAKO;AAKA,IAAM,QAAe;AAAA,EAC1B,YAAQ,kBAAK;AAAA,IACX,QAAQ;AAAA,IAER,QAAQ;AAAA,MACN,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/C,UAAM,uBAAQ,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAClD,eAAW,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACtD;AAAA,EACF,CAAC;AAAA,EAED,UAAM,kBAAK;AAAA,IACT,QAAQ;AAAA,IAER,QAAQ;AAAA,MACN,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAE/C,WAAO,qBAAK;AAAA,QACV,YAAY,EAAE,YAAY,KAAK;AAAA,QAC/B,WAAW;AAAA,MACb,CAAC;AAAA,MAED,cAAU,yBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAEvD,eAAW,0BAAU;AAAA,QACnB,cAAc,EAAE,MAAM,MAAM;AAAA,MAC9B,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAEH;;;AC5CA,oBAA4B;AAC5B,kBAA2B;AAE3B,qBAAkC;AAGlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAEA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA,EAEf,aAAa;AAAA,EACb,aAAa;AAAA,EAEb,eAAe;AAAA,IACb,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA,EACtC;AACF,CAAC;AAED,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAErC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AFxBD,IAAO,mBAAQ;AAAA,MACb,qBAAO;AAAA,IACL,IAAI;AAAA,MACF,UAAU;AAAA,MACV,KAAK;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,QAAQ,CAAC,uBAAuB;AAAA,QAChC,aAAa;AAAA,QACb,SAAS,CAAC,OAAO,MAAM;AAAA,QACvB,gBAAgB,CAAC,gBAAgB,eAAe;AAAA,MAClD;AAAA,MACA,MAAM;AAAA,MACN,kBAAkB,CAAC,QAAQ;AACzB,YAAI,IAAI,UAAU,QAAQ,SAAS,EAAE,OAAO,OAAO,CAAC;AAAA,MACtD;AAAA,IACF;AAAA,EACF,CAAC;AACH;",
  "names": ["import_core", "import_fields"]
}
